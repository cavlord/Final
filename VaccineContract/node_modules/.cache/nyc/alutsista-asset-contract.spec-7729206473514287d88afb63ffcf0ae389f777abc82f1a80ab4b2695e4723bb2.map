{"version":3,"file":"C:/Users/FAHMIRAHMADI/Documents/GitHub/blockchain-assignment/AlutsistaContract/src/alutsista-asset-contract.spec.ts","sources":["C:/Users/FAHMIRAHMADI/Documents/GitHub/blockchain-assignment/AlutsistaContract/src/alutsista-asset-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Context } from 'fabric-contract-api';\nimport { ChaincodeStub, ClientIdentity } from 'fabric-shim';\nimport { AlutsistaAssetContract } from '.';\n\nimport * as chai from 'chai';\nimport * as chaiAsPromised from 'chai-as-promised';\nimport * as sinon from 'sinon';\nimport * as sinonChai from 'sinon-chai';\nimport winston = require('winston');\n\nchai.should();\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nclass TestContext implements Context {\n    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);\n    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);\n    public logger = {\n        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),\n        setLevel: sinon.stub(),\n     };\n}\n\ndescribe('AlutsistaAssetContract', () => {\n\n    let contract: AlutsistaAssetContract;\n    let ctx: TestContext;\n\n    beforeEach(() => {\n        contract = new AlutsistaAssetContract();\n        ctx = new TestContext();\n        ctx.stub.getState.withArgs('1001').resolves(Buffer.from('{\"value\":\"alutsista asset 1001 value\"}'));\n        ctx.stub.getState.withArgs('1002').resolves(Buffer.from('{\"value\":\"alutsista asset 1002 value\"}'));\n    });\n\n    describe('#alutsistaAssetExists', () => {\n\n        it('should return true for a alutsista asset', async () => {\n            await contract.alutsistaAssetExists(ctx, '1001').should.eventually.be.true;\n        });\n\n        it('should return false for a alutsista asset that does not exist', async () => {\n            await contract.alutsistaAssetExists(ctx, '1003').should.eventually.be.false;\n        });\n\n    });\n\n    describe('#createAlutsistaAsset', () => {\n\n        it('should create a alutsista asset', async () => {\n            await contract.createAlutsistaAsset(ctx, '1003', 'alutsista asset 1003 value','myvalue',2000);\n            ctx.stub.putState.should.have.been.calledOnceWithExactly('1003', Buffer.from('{\"value\":\"alutsista asset 1003 value\"}'));\n        });\n\n        it('should throw an error for a alutsista asset that already exists', async () => {\n            await contract.createAlutsistaAsset(ctx, '1001', 'myvalue','myvalue',2000).should.be.rejectedWith('/The alutsista asset 1001 already exists/');\n        });\n\n    });\n\n    describe('#readAlutsistaAsset', () => {\n\n        it('should return a alutsista asset', async () => {\n            await contract.readAlutsistaAsset(ctx, '1001').should.eventually.deep.equal({ value: 'alutsista asset 1001 value', });\n        });\n\n        it('should throw an error for a alutsista asset that does not exist', async () => {\n            await contract.readAlutsistaAsset(ctx, '1003').should.be.rejectedWith(/The alutsista asset 1003 does not exist/);\n        });\n\n    });\n\n    describe('#updateAlutsistaAsset', () => {\n\n        it('should update a alutsista asset', async () => {\n            await contract.updateAlutsistaAsset(ctx, '1001', 'alutsista asset 1001 new value','myvalue',2000);\n            ctx.stub.putState.should.have.been.calledOnceWithExactly('1001', Buffer.from('{\"value\":\"alutsista asset 1001 new value\"}'));\n        });\n\n        it('should throw an error for a alutsista asset that does not exist', async () => {\n            await contract.updateAlutsistaAsset(ctx, '1003', 'alutsista asset 1003 new value','',2000).should.be.rejectedWith('/The alutsista asset 1003 does not exist/');\n        });\n\n    });\n\n    describe('#deleteAlutsistaAsset', () => {\n\n        it('should delete a alutsista asset', async () => {\n            await contract.deleteAlutsistaAsset(ctx, '1001');\n            ctx.stub.deleteState.should.have.been.calledOnceWithExactly('1001');\n        });\n\n        it('should throw an error for a alutsista asset that does not exist', async () => {\n            await contract.deleteAlutsistaAsset(ctx, '1003').should.be.rejectedWith('/The alutsista asset 1003 does not exist/');\n        });\n\n    });\n\n});\n"]}