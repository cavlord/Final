{"version":3,"file":"C:/Users/FAHMIRAHMADI/Documents/GitHub/blockchain-assignment/AlutsistaContract/src/alutsista-asset-contract.ts","sources":["C:/Users/FAHMIRAHMADI/Documents/GitHub/blockchain-assignment/AlutsistaContract/src/alutsista-asset-contract.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Context, Contract, Info, Returns, Transaction } from 'fabric-contract-api';\nimport { AlutsistaAsset } from './alutsista-asset';\n\n@Info({ title: 'AlutsistaAssetContract', description: 'My Smart Contract' })\nexport class AlutsistaAssetContract extends Contract {\n\n    @Transaction(false)\n    @Returns('boolean')\n    public async alutsistaAssetExists(ctx: Context, alutsistaAssetId: string): Promise<boolean> {\n        const buffer = await ctx.stub.getState(alutsistaAssetId);\n        return (!!buffer && buffer.length > 0);\n    }\n\n    @Transaction()\n    public async createAlutsistaAsset(ctx: Context, alutsistaAssetId: string, name: string, model: string, year: number): Promise<void> {\n       const hasAccess = await this.hasRole(ctx, ['Manufacturer']);\n        if (!hasAccess) {\n            throw new Error(`Only manufacturer can create car asset`);\n        }\n        const exists = await this.alutsistaAssetExists(ctx, alutsistaAssetId);\n        if (exists) {\n            throw new Error(`The alutsista asset ${alutsistaAssetId} already exists`);\n        }\n        const alutsistaAsset = new AlutsistaAsset();\n        alutsistaAsset.name = name;\n        alutsistaAsset.model = model;\n        alutsistaAsset.year = year;\n        const buffer = Buffer.from(JSON.stringify(alutsistaAsset));\n        await ctx.stub.putState(alutsistaAssetId, buffer);\n\n        const transientMap = ctx.stub.getTransient();\n        if (transientMap.get('remark')) {\n            await ctx.stub.putPrivateData('productionRemark', alutsistaAssetId, transientMap.get('remark'));\n        }\n    }\n\n    @Transaction(false)\n    @Returns('AlutsistaAsset')\n    public async readAlutsistaAsset(ctx: Context, alutsistaAssetId: string): Promise<AlutsistaAsset> {\n        const exists = await this.alutsistaAssetExists(ctx, alutsistaAssetId);\n        if (!exists) {\n            throw new Error(`The alutsista asset ${alutsistaAssetId} does not exist`);\n        }\n        const buffer = await ctx.stub.getState(alutsistaAssetId);\n        const alutsistaAsset = JSON.parse(buffer.toString()) as AlutsistaAsset;\n\n        try {\n            const privBuffer = await ctx.stub.getPrivateData('productionRemark', alutsistaAssetId);\n            alutsistaAsset.remark = privBuffer.toString();\n            return alutsistaAsset;\n        } catch (error) {\n            return alutsistaAsset;\n        }\n    }\n\n    @Transaction()\n    public async updateAlutsistaAsset(ctx: Context, alutsistaAssetId: string, name: string, model: string, year: number): Promise<void> {\n        const hasAccess = await this.hasRole(ctx, ['Manufacturer', 'Dealer']);\n        if (!hasAccess) {\n            throw new Error(`Only manufacturer or dealer can update car asset`);\n        }\n        const exists = await this.alutsistaAssetExists(ctx, alutsistaAssetId);\n        if (!exists) {\n            throw new Error(`The alutsista asset ${alutsistaAssetId} does not exist`);\n        }\n        const alutsistaAsset = new AlutsistaAsset();\n        alutsistaAsset.name = name;\n        alutsistaAsset.model = model;\n        alutsistaAsset.year = year;\n        const buffer = Buffer.from(JSON.stringify(alutsistaAsset));\n        await ctx.stub.putState(alutsistaAssetId, buffer);\n    }\n\n    @Transaction()\n    public async deleteAlutsistaAsset(ctx: Context, alutsistaAssetId: string): Promise<void> {\n        const hasAccess = await this.hasRole(ctx, ['Dealer']);\n        if (!hasAccess) {\n            throw new Error(`Only dealer can delete car asset`);\n        }\n        const exists = await this.alutsistaAssetExists(ctx, alutsistaAssetId);\n        if (!exists) {\n            throw new Error(`The alutsista asset ${alutsistaAssetId} does not exist`);\n        }\n        await ctx.stub.deleteState(alutsistaAssetId);\n    }\n\n    @Transaction(false)\n    public async queryAllAssets(ctx: Context): Promise<string> {\n        const startKey = '000';\n        const endKey = '999';\n        const iterator = await ctx.stub.getStateByRange(startKey, endKey);\n        const allResults = [];\n        while (true) {\n            const res = await iterator.next();\n            if (res.value && res.value.value.toString()) {\n                console.log(res.value.value.toString());\n\n                const Key = res.value.key;\n                let Record;\n                try {\n                    Record = JSON.parse(res.value.value.toString());\n                } catch (err) {\n                    console.log(err);\n                    Record = res.value.value.toString();\n                }\n                allResults.push({ Key, Record });\n            }\n            if (res.done) {\n                console.log('end of data');\n                await iterator.close();\n                console.info(allResults);\n                return JSON.stringify(allResults);\n            }\n        }\n    }\n\n    @Transaction(false)\n    public async queryByMaker(ctx: Context, maker: string): Promise<string> {\n        const query = { selector: { maker } };\n        const queryString = JSON.stringify(query);\n        const iterator = await ctx.stub.getQueryResult(queryString);\n        const allResults = [];\n        while (true) {\n            const res = await iterator.next();\n            if (res.value && res.value.value.toString()) {\n                console.log(res.value.value.toString());\n\n                const Key = res.value.key;\n                let Record;\n                try {\n                    Record = JSON.parse(res.value.value.toString());\n                } catch (err) {\n                    console.log(err);\n                    Record = res.value.value.toString();\n                }\n                allResults.push({ Key, Record });\n            }\n            if (res.done) {\n                console.log('end of data');\n                await iterator.close();\n                console.info(allResults);\n                return JSON.stringify(allResults);\n            }\n        }\n    }\n\n    @Transaction(false)\n    public async queryByMinYear(ctx: Context, min: number, size: number, bookmark?: string): Promise<string> {\n        const query = { selector: { year: { $gte: min } } };\n        const queryString = JSON.stringify(query);\n\n        const { iterator, metadata } = await ctx.stub.getQueryResultWithPagination(queryString, size, bookmark);\n\n        const allResults = [];\n        while (true) {\n            const res = await iterator.next();\n            if (res.value && res.value.value.toString()) {\n                console.log(res.value.value.toString());\n\n                const Key = res.value.key;\n                let Record;\n                try {\n                    Record = JSON.parse(res.value.value.toString());\n                } catch (err) {\n                    console.log(err);\n                    Record = res.value.value.toString();\n                }\n                allResults.push({ Key, Record });\n            }\n            if (res.done) {\n                const result = {\n                    results: allResults,\n                    metadata\n                };\n                console.log('end of data');\n                await iterator.close();\n                console.info(result);\n                return JSON.stringify(result);\n            }\n        }\n    }\n\n    @Transaction(false)\n    public async getHistoryByKey(ctx: Context, alutsistaAssetId: string): Promise<string> {\n        const iterator = await ctx.stub.getHistoryForKey(alutsistaAssetId);\n        const allResults = [];\n        while (true) {\n            const res = await iterator.next();\n            if (res.value && res.value.value.toString()) {\n                console.log(res.value.value.toString());\n\n                let Record;\n                try {\n                    Record = JSON.parse(res.value.value.toString());\n                } catch (err) {\n                    console.log(err);\n                    Record = res.value.value.toString();\n                }\n                allResults.push({ Record });\n            }\n            if (res.done) {\n                console.log('end of data');\n                await iterator.close();\n                console.info(allResults);\n                return JSON.stringify(allResults);\n            }\n        }\n    }\n\n    public async hasRole(ctx: Context, roles: string[]) {\n        const clientID = ctx.clientIdentity;\n        for (const roleName of roles) {\n            if (clientID.assertAttributeValue('role', roleName)) {\n                if (clientID.getMSPID() === 'Org1MSP' && clientID.getAttributeValue('role') === 'Manufacturer') { return true; }\n                if (clientID.getMSPID() === 'Org2MSP' && clientID.getAttributeValue('role') === 'Dealer') { return true; }\n            }\n        }\n        return false;\n        }\n    }"]}